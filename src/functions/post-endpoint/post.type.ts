/**
 * Generated by @skyleague/therefore@v1.0.0-local
 * Do not manually touch this
 */
/* eslint-disable */
import AjvValidator from 'ajv'
import type { ValidateFunction } from 'ajv'

export interface IncomingBody {
    loyalty: Loyalty
}

export const IncomingBody = {
    validate: (await import('./schemas/incoming-body.schema.js')).validate10 as unknown as ValidateFunction<IncomingBody>,
    get schema() {
        return IncomingBody.validate.schema
    },
    get errors() {
        return IncomingBody.validate.errors ?? undefined
    },
    is: (o: unknown): o is IncomingBody => IncomingBody.validate(o) === true,
    assert: (o: unknown) => {
        if (!IncomingBody.validate(o)) {
            throw new AjvValidator.ValidationError(IncomingBody.errors ?? [])
        }
    },
} as const

export interface IncomingHeaders {
    'x-trace-id': string
}

export const IncomingHeaders = {
    validate: (await import('./schemas/incoming-headers.schema.js')).validate10 as unknown as ValidateFunction<IncomingHeaders>,
    get schema() {
        return IncomingHeaders.validate.schema
    },
    get errors() {
        return IncomingHeaders.validate.errors ?? undefined
    },
    is: (o: unknown): o is IncomingHeaders => IncomingHeaders.validate(o) === true,
    assert: (o: unknown) => {
        if (!IncomingHeaders.validate(o)) {
            throw new AjvValidator.ValidationError(IncomingHeaders.errors ?? [])
        }
    },
} as const

export interface Loyalty {
    id?: string
    beans: number
}

export interface Response {
    loyalty: {
        id?: string
        beans: number
    }
}

export const Response = {
    validate: (await import('./schemas/response.schema.js')).validate10 as unknown as ValidateFunction<Response>,
    get schema() {
        return Response.validate.schema
    },
    get errors() {
        return Response.validate.errors ?? undefined
    },
    is: (o: unknown): o is Response => Response.validate(o) === true,
    assert: (o: unknown) => {
        if (!Response.validate(o)) {
            throw new AjvValidator.ValidationError(Response.errors ?? [])
        }
    },
} as const
